/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'pxGam5'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct _SCOPETABLE_ENTRY;
struct HWND__;
struct tagWNDCLASSEXA;
struct HINSTANCE__;
struct HICON__;
struct HBRUSH__;
struct HMENU__;
struct HBITMAP__;
struct tagWINDOWPLACEMENT;
struct _iobuf;
union _LARGE_INTEGER;
struct IDirectDrawVtbl;
struct IDirectDrawClipper;
struct IUnknown;
struct IUnknownVtbl;
struct tagPALETTEENTRY;
struct IDirectDrawPalette;
struct _DDSURFACEDESC;
struct IDirectDrawSurface;
struct _DDCAPS;

/* 1 */
struct _GUID
{
  unsigned __int32 Data1;
  unsigned __int16 Data2;
  unsigned __int16 Data3;
  unsigned __int8 Data4[8];
};

/* 2 */
typedef struct _GUID GUID;

/* 3 */
typedef struct _SCOPETABLE_ENTRY *PSCOPETABLE_ENTRY;

/* 52 */
typedef void *PVOID;

/* 16 */
typedef unsigned __int32 DWORD;

/* 4 */
struct _EH3_EXCEPTION_REGISTRATION
{
  struct _EH3_EXCEPTION_REGISTRATION *Next;
  PVOID ExceptionHandler;
  PSCOPETABLE_ENTRY ScopeTable;
  DWORD TryLevel;
};

/* 5 */
typedef struct _EH3_EXCEPTION_REGISTRATION EH3_EXCEPTION_REGISTRATION;

/* 6 */
typedef struct _EH3_EXCEPTION_REGISTRATION *PEH3_EXCEPTION_REGISTRATION;

/* 7 */
struct CPPEH_RECORD
{
  DWORD old_esp;
  EXCEPTION_POINTERS *exc_ptr;
  struct _EH3_EXCEPTION_REGISTRATION registration;
};

/* 8 */
struct _SCOPETABLE_ENTRY
{
  int EnclosingLevel;
  void *FilterFunc;
  void *HandlerFunc;
};

/* 10 */
typedef HWND__ *HWND;

/* 12 */
typedef unsigned int UINT;

/* 13 */
typedef UINT WPARAM;

/* 15 */
typedef __int32 LONG;

/* 14 */
typedef LONG LPARAM;

/* 18 */
struct tagPOINT
{
  LONG x;
  LONG y;
};

/* 17 */
typedef tagPOINT POINT;

/* 9 */
struct tagMSG
{
  HWND hwnd;
  UINT message;
  WPARAM wParam;
  LPARAM lParam;
  DWORD time;
  POINT pt;
};

/* 11 */
struct HWND__
{
  int unused;
};

/* 19 */
typedef tagWNDCLASSEXA WNDCLASSEXA;

/* 22 */
typedef LONG LRESULT;

/* 21 */
typedef LRESULT (__stdcall *WNDPROC)(HWND, UINT, WPARAM, LPARAM);

/* 23 */
typedef HINSTANCE__ *HINSTANCE;

/* 25 */
typedef HICON__ *HICON;

/* 27 */
typedef HICON HCURSOR;

/* 28 */
typedef HBRUSH__ *HBRUSH;

/* 31 */
typedef char CHAR;

/* 30 */
typedef const CHAR *LPCSTR;

/* 20 */
struct tagWNDCLASSEXA
{
  UINT cbSize;
  UINT style;
  WNDPROC lpfnWndProc;
  int cbClsExtra;
  int cbWndExtra;
  HINSTANCE hInstance;
  HICON hIcon;
  HCURSOR hCursor;
  HBRUSH hbrBackground;
  LPCSTR lpszMenuName;
  LPCSTR lpszClassName;
  HICON hIconSm;
};

/* 24 */
struct HINSTANCE__
{
  int unused;
};

/* 26 */
struct HICON__
{
  int unused;
};

/* 29 */
struct HBRUSH__
{
  int unused;
};

/* 32 */
struct tagRECT
{
  LONG left;
  LONG top;
  LONG right;
  LONG bottom;
};

/* 34 */
typedef HMENU__ *HMENU;

/* 36 */
typedef HBITMAP__ *HBITMAP;

/* 38 */
typedef CHAR *LPSTR;

/* 33 */
struct tagMENUITEMINFOA
{
  UINT cbSize;
  UINT fMask;
  UINT fType;
  UINT fState;
  UINT wID;
  HMENU hSubMenu;
  HBITMAP hbmpChecked;
  HBITMAP hbmpUnchecked;
  DWORD dwItemData;
  LPSTR dwTypeData;
  UINT cch;
  HBITMAP hbmpItem;
};

/* 35 */
struct HMENU__
{
  int unused;
};

/* 37 */
struct HBITMAP__
{
  int unused;
};

/* 40 */
typedef unsigned __int16 WORD;

/* 39 */
struct _SYSTEMTIME
{
  WORD wYear;
  WORD wMonth;
  WORD wDayOfWeek;
  WORD wDay;
  WORD wHour;
  WORD wMinute;
  WORD wSecond;
  WORD wMilliseconds;
};

/* 43 */
struct _FILETIME
{
  DWORD dwLowDateTime;
  DWORD dwHighDateTime;
};

/* 42 */
typedef _FILETIME FILETIME;

/* 41 */
struct _WIN32_FIND_DATAA
{
  DWORD dwFileAttributes;
  FILETIME ftCreationTime;
  FILETIME ftLastAccessTime;
  FILETIME ftLastWriteTime;
  DWORD nFileSizeHigh;
  DWORD nFileSizeLow;
  DWORD dwReserved0;
  DWORD dwReserved1;
  CHAR cFileName[260];
  CHAR cAlternateFileName[14];
};

/* 44 */
typedef tagWINDOWPLACEMENT WINDOWPLACEMENT;

/* 46 */
typedef tagRECT RECT;

/* 45 */
struct tagWINDOWPLACEMENT
{
  UINT length;
  UINT flags;
  UINT showCmd;
  POINT ptMinPosition;
  POINT ptMaxPosition;
  RECT rcNormalPosition;
};

/* 49 */
typedef unsigned __int8 BYTE;

/* 48 */
typedef BYTE *LPBYTE;

/* 50 */
typedef void *HANDLE;

/* 47 */
struct _STARTUPINFOA
{
  DWORD cb;
  LPSTR lpReserved;
  LPSTR lpDesktop;
  LPSTR lpTitle;
  DWORD dwX;
  DWORD dwY;
  DWORD dwXSize;
  DWORD dwYSize;
  DWORD dwXCountChars;
  DWORD dwYCountChars;
  DWORD dwFillAttribute;
  DWORD dwFlags;
  WORD wShowWindow;
  WORD cbReserved2;
  LPBYTE lpReserved2;
  HANDLE hStdInput;
  HANDLE hStdOutput;
  HANDLE hStdError;
};

/* 54 */
typedef unsigned __int32 UINT_PTR;

/* 53 */
typedef UINT_PTR SIZE_T;

/* 51 */
struct _MEMORY_BASIC_INFORMATION
{
  PVOID BaseAddress;
  PVOID AllocationBase;
  DWORD AllocationProtect;
  SIZE_T RegionSize;
  DWORD State;
  DWORD Protect;
  DWORD Type;
};

/* 56 */
typedef void *LPVOID;

/* 57 */
typedef int BOOL;

/* 55 */
struct _SECURITY_ATTRIBUTES
{
  DWORD nLength;
  LPVOID lpSecurityDescriptor;
  BOOL bInheritHandle;
};

/* 60 */
struct _SYSTEM_INFO::$A707B71C060B6D10F73A71917EA8473F::$AA04DEB0C6383F89F13D312A174572A9
{
  WORD wProcessorArchitecture;
  WORD wReserved;
};

/* 59 */
union _SYSTEM_INFO::$A707B71C060B6D10F73A71917EA8473F
{
  DWORD dwOemId;
  struct
  {
    WORD wProcessorArchitecture;
    WORD wReserved;
  };
};

/* 58 */
struct _SYSTEM_INFO
{
  union
  {
    DWORD dwOemId;
    struct
    {
      WORD wProcessorArchitecture;
      WORD wReserved;
    };
  };
  DWORD dwPageSize;
  LPVOID lpMinimumApplicationAddress;
  LPVOID lpMaximumApplicationAddress;
  DWORD dwActiveProcessorMask;
  DWORD dwNumberOfProcessors;
  DWORD dwProcessorType;
  DWORD dwAllocationGranularity;
  WORD wProcessorLevel;
  WORD wProcessorRevision;
};

/* 61 */
struct _cpinfo
{
  UINT MaxCharSize;
  BYTE DefaultChar[2];
  BYTE LeadByte[12];
};

/* 62 */
typedef _SYSTEMTIME SYSTEMTIME;

/* 65 */
typedef unsigned __int16 wchar_t;

/* 64 */
typedef wchar_t WCHAR;

/* 63 */
struct _TIME_ZONE_INFORMATION
{
  LONG Bias;
  WCHAR StandardName[32];
  SYSTEMTIME StandardDate;
  LONG StandardBias;
  WCHAR DaylightName[32];
  SYSTEMTIME DaylightDate;
  LONG DaylightBias;
};

/* 66 */
typedef _iobuf FILE;

/* 67 */
#pragma pack(push, 8)
struct _iobuf
{
  char *_ptr;
  int _cnt;
  char *_base;
  int _flag;
  int _file;
  int _charbuf;
  int _bufsiz;
  char *_tmpfname;
};
#pragma pack(pop)

/* 68 */
typedef _LARGE_INTEGER LARGE_INTEGER;

/* 70 */
struct _LARGE_INTEGER::$837407842DC9087486FDFA5FEB63B74E
{
  DWORD LowPart;
  LONG HighPart;
};

/* 71 */
typedef __int64 LONGLONG;

/* 69 */
union _LARGE_INTEGER
{
  struct
  {
    DWORD LowPart;
    LONG HighPart;
  };
  _LARGE_INTEGER::$837407842DC9087486FDFA5FEB63B74E u;
  LONGLONG QuadPart;
};

/* 72 */
struct exception;

/* 73 */
struct type_info;

/* 74 */
struct _msExcept7
{
  int Magic;
  int Count;
  void *InfoPtr;
  int CountDtr;
  void *DtrPtr;
  int _unk[2];
};

/* 75 */
struct _msExcInfo
{
  int Id;
  void *Proc;
};

/* 76 */
struct _msExcExt
{
  int _unk[3];
  int Count;
  void *RttiBlkPtr;
};

/* 77 */
struct _msRttiDscr
{
  int _unk;
  void *RttiPtr;
  int spoff;
  void *Dtr;
};

/* 78 */
union __declspec(align(8)) __m64
{
  unsigned __int64 m64_u64;
  float m64_f32[2];
  __int8 m64_i8[8];
  __int16 m64_i16[4];
  __int32 m64_i32[2];
  __int64 m64_i64;
  unsigned __int8 m64_u8[8];
  unsigned __int16 m64_u16[4];
  unsigned __int32 m64_u32[2];
};

/* 79 */
union __declspec(align(16)) __m128
{
  float m128_f32[4];
  unsigned __int64 m128_u64[2];
  __int8 m128_i8[16];
  __int16 m128_i16[8];
  __int32 m128_i32[4];
  __int64 m128_i64[2];
  unsigned __int8 m128_u8[16];
  unsigned __int16 m128_u16[8];
  unsigned __int32 m128_u32[4];
};

/* 80 */
struct __m128d
{
  double m128d_f64[2];
};

/* 81 */
union __declspec(align(16)) __m128i
{
  __int8 m128i_i8[16];
  __int16 m128i_i16[8];
  __int32 m128i_i32[4];
  __int64 m128i_i64[2];
  unsigned __int8 m128i_u8[16];
  unsigned __int16 m128i_u16[8];
  unsigned __int32 m128i_u32[4];
  unsigned __int64 m128i_u64[2];
};

/* 83 */
typedef UINT (__stdcall *LPOFNHOOKPROC)(HWND, UINT, WPARAM, LPARAM);

/* 82 */
#pragma pack(push, 1)
struct tagOFNA
{
  DWORD lStructSize;
  HWND hwndOwner;
  HINSTANCE hInstance;
  LPCSTR lpstrFilter;
  LPSTR lpstrCustomFilter;
  DWORD nMaxCustFilter;
  DWORD nFilterIndex;
  LPSTR lpstrFile;
  DWORD nMaxFile;
  LPSTR lpstrFileTitle;
  DWORD nMaxFileTitle;
  LPCSTR lpstrInitialDir;
  LPCSTR lpstrTitle;
  DWORD Flags;
  WORD nFileOffset;
  WORD nFileExtension;
  LPCSTR lpstrDefExt;
  LPARAM lCustData;
  LPOFNHOOKPROC lpfnHook;
  LPCSTR lpTemplateName;
};
#pragma pack(pop)

/* 84 */
struct __declspec(align(4)) NPCHAR
{
  int cond;
  int x;
  int y;
  int xm;
  int ym;
  int xoff;
  int yoff;
  int w;
  int h;
  int surf;
  int type;
  int state;
  int count1;
  int count2;
  int count3;
  int life;
  int damage;
  int flag;
  int shock;
  int score;
  int type2;
  int child;
  int rot1;
  int count4;
  int num;
  int destroyHitVoice;
  RECT rect;
};

/* 85 */
struct __declspec(align(2)) NpcAttr
{
  char flag;
  __declspec(align(2)) char score;
  char damage;
  char xoff;
  char yoff;
  char w;
  char h;
  __int16 life;
  char surf;
  char byteB;
};

/* 86 */
struct __declspec(align(16)) Bullet
{
  int cond;
  int x;
  int y;
  int xm;
  int ym;
  int xoff;
  int yoff;
  int w;
  int h;
  int _24;
  int type;
  char gap2C[16];
  int life;
  int damage;
  int flag;
  __declspec(align(16)) int _50;
  char gap54[8];
  int _5C;
};

/* 87 */
struct __declspec(align(4)) BulletAttr
{
  _DWORD flag;
  _BYTE damage;
  _BYTE xoff;
  _BYTE yoff;
  _BYTE w;
  _BYTE h;
  _WORD life;
};

/* 88 */
struct __declspec(align(4)) Ship
{
  int cond;
  int x;
  int y;
  int xm;
  int ym;
  int _14;
  int _18;
  int w;
  int h;
  int _24;
  int type;
  int _2C;
  _BYTE gap30[12];
  int life;
  int _40;
  int flag;
  int shock;
  int score;
  int _50;
  _BYTE gap54[12];
  int _60;
  int destroyHitVoice;
};

/* 89 */
struct __declspec(align(4)) Caret
{
  _DWORD cond;
  _DWORD x;
  _DWORD y;
  _BYTE gapC[8];
  _DWORD dword14;
  _DWORD dword18;
  _BYTE gap1C[8];
  _DWORD dword24;
  _DWORD type;
  _BYTE gap2C[36];
  _DWORD param;
};

/* 90 */
struct CaretAttr
{
  _BYTE byte0;
  _BYTE byte1;
  _BYTE byte2;
};

/* 91 */
struct __unaligned __declspec(align(2)) PximgDecodeInfo
{
  _DWORD height;
  _DWORD line_indexes;
  _DWORD hash_a;
  _WORD hash_b;
};

/* 92 */
enum GameFlag : __int16
{
  REPLAY = 0x1,
  TRIAL = 0x2,
};

/* 93 */
enum MACRO_WM
{
  WM_NULL = 0x0,
  WM_CREATE = 0x1,
  WM_DESTROY = 0x2,
  WM_MOVE = 0x3,
  WM_SIZEWAIT = 0x4,
  WM_SIZE = 0x5,
  WM_ACTIVATE = 0x6,
  WM_SETFOCUS = 0x7,
  WM_KILLFOCUS = 0x8,
  WM_SETVISIBLE = 0x9,
  WM_ENABLE = 0xA,
  WM_SETREDRAW = 0xB,
  WM_SETTEXT = 0xC,
  WM_GETTEXT = 0xD,
  WM_GETTEXTLENGTH = 0xE,
  WM_PAINT = 0xF,
  WM_CLOSE = 0x10,
  WM_QUERYENDSESSION = 0x11,
  WM_QUIT = 0x12,
  WM_QUERYOPEN = 0x13,
  WM_ERASEBKGND = 0x14,
  WM_SYSCOLORCHANGE = 0x15,
  WM_ENDSESSION = 0x16,
  WM_SYSTEMERROR = 0x17,
  WM_SHOWWINDOW = 0x18,
  WM_CTLCOLOR = 0x19,
  WM_WININICHANGE = 0x1A,
  WM_SETTINGCHANGE = 0x1A,
  WM_DEVMODECHANGE = 0x1B,
  WM_ACTIVATEAPP = 0x1C,
  WM_FONTCHANGE = 0x1D,
  WM_TIMECHANGE = 0x1E,
  WM_CANCELMODE = 0x1F,
  WM_SETCURSOR = 0x20,
  WM_MOUSEACTIVATE = 0x21,
  WM_CHILDACTIVATE = 0x22,
  WM_QUEUESYNC = 0x23,
  WM_GETMINMAXINFO = 0x24,
  WM_LOGOFF = 0x25,
  WM_PAINTICON = 0x26,
  WM_ICONERASEBKGND = 0x27,
  WM_NEXTDLGCTL = 0x28,
  WM_ALTTABACTIVE = 0x29,
  WM_SPOOLERSTATUS = 0x2A,
  WM_DRAWITEM = 0x2B,
  WM_MEASUREITEM = 0x2C,
  WM_DELETEITEM = 0x2D,
  WM_VKEYTOITEM = 0x2E,
  WM_CHARTOITEM = 0x2F,
  WM_SETFONT = 0x30,
  WM_GETFONT = 0x31,
  WM_SETHOTKEY = 0x32,
  WM_GETHOTKEY = 0x33,
  WM_FILESYSCHANGE = 0x34,
  WM_ISACTIVEICON = 0x35,
  WM_QUERYPARKICON = 0x36,
  WM_QUERYDRAGICON = 0x37,
  WM_WINHELP = 0x38,
  WM_COMPAREITEM = 0x39,
  WM_FULLSCREEN = 0x3A,
  WM_CLIENTSHUTDOWN = 0x3B,
  WM_DDEMLEVENT = 0x3C,
  WM_GETOBJECT = 0x3D,
  MM_CALCSCROLL = 0x3F,
  WM_TESTING = 0x40,
  WM_COMPACTING = 0x41,
  WM_OTHERWINDOWCREATED = 0x42,
  WM_OTHERWINDOWDESTROYED = 0x43,
  WM_COMMNOTIFY = 0x44,
  WM_MEDIASTATUSCHANGE = 0x45,
  WM_WINDOWPOSCHANGING = 0x46,
  WM_WINDOWPOSCHANGED = 0x47,
  WM_POWER = 0x48,
  WM_COPYGLOBALDATA = 0x49,
  WM_COPYDATA = 0x4A,
  WM_CANCELJOURNAL = 0x4B,
  WM_LOGONNOTIFY = 0x4C,
  WM_KEYF1 = 0x4D,
  WM_NOTIFY = 0x4E,
  WM_ACCESS_WINDOW = 0x4F,
  WM_INPUTLANGCHANGEREQUEST = 0x50,
  WM_INPUTLANGCHANGE = 0x51,
  WM_TCARD = 0x52,
  WM_HELP = 0x53,
  WM_USERCHANGED = 0x54,
  WM_NOTIFYFORMAT = 0x55,
  WM_QM_ACTIVATE = 0x60,
  WM_HOOK_DO_CALLBACK = 0x61,
  WM_SYSCOPYDATA = 0x62,
  WM_FINALDESTROY = 0x70,
  WM_MEASUREITEM_CLIENTDATA = 0x71,
  WM_CONTEXTMENU = 0x7B,
  WM_STYLECHANGING = 0x7C,
  WM_STYLECHANGED = 0x7D,
  WM_DISPLAYCHANGE = 0x7E,
  WM_GETICON = 0x7F,
  WM_SETICON = 0x80,
  WM_NCCREATE = 0x81,
  WM_NCDESTROY = 0x82,
  WM_NCCALCSIZE = 0x83,
  WM_NCHITTEST = 0x84,
  WM_NCPAINT = 0x85,
  WM_NCACTIVATE = 0x86,
  WM_GETDLGCODE = 0x87,
  WM_SYNCPAINT = 0x88,
  WM_SYNCTASK = 0x89,
  WM_NCMOUSEMOVE = 0xA0,
  WM_NCLBUTTONDOWN = 0xA1,
  WM_NCLBUTTONUP = 0xA2,
  WM_NCLBUTTONDBLCLK = 0xA3,
  WM_NCRBUTTONDOWN = 0xA4,
  WM_NCRBUTTONUP = 0xA5,
  WM_NCRBUTTONDBLCLK = 0xA6,
  WM_NCMBUTTONDOWN = 0xA7,
  WM_NCMBUTTONUP = 0xA8,
  WM_NCMBUTTONDBLCLK = 0xA9,
  WM_NCXBUTTONDOWN = 0xAB,
  WM_NCXBUTTONUP = 0xAC,
  WM_NCXBUTTONDBLCLK = 0xAD,
  EM_GETSEL = 0xB0,
  EM_SETSEL = 0xB1,
  EM_GETRECT = 0xB2,
  EM_SETRECT = 0xB3,
  EM_SETRECTNP = 0xB4,
  EM_SCROLL = 0xB5,
  EM_LINESCROLL = 0xB6,
  EM_SCROLLCARET = 0xB7,
  EM_GETMODIFY = 0xB8,
  EM_SETMODIFY = 0xB9,
  EM_GETLINECOUNT = 0xBA,
  EM_LINEINDEX = 0xBB,
  EM_SETHANDLE = 0xBC,
  EM_GETHANDLE = 0xBD,
  EM_GETTHUMB = 0xBE,
  EM_LINELENGTH = 0xC1,
  EM_REPLACESEL = 0xC2,
  EM_SETFONT = 0xC3,
  EM_GETLINE = 0xC4,
  EM_LIMITTEXT = 0xC5,
  EM_CANUNDO = 0xC6,
  EM_UNDO = 0xC7,
  EM_FMTLINES = 0xC8,
  EM_LINEFROMCHAR = 0xC9,
  EM_SETWORDBREAK = 0xCA,
  EM_SETTABSTOPS = 0xCB,
  EM_SETPASSWORDCHAR = 0xCC,
  EM_EMPTYUNDOBUFFER = 0xCD,
  EM_GETFIRSTVISIBLELINE = 0xCE,
  EM_SETREADONLY = 0xCF,
  EM_SETWORDBREAKPROC = 0xD0,
  EM_GETWORDBREAKPROC = 0xD1,
  EM_GETPASSWORDCHAR = 0xD2,
  EM_SETMARGINS = 0xD3,
  EM_GETMARGINS = 0xD4,
  EM_POSFROMCHAR = 0xD5,
  EM_CHARFROMPOS = 0xD6,
  SBM_SETPOS = 0xE0,
  SBM_GETPOS = 0xE1,
  SBM_SETRANGE = 0xE2,
  SBM_GETRANGE = 0xE3,
  SBM_ENABLE_ARROWS = 0xE4,
  SBM_SETRANGEREDRAW = 0xE6,
  SBM_SETSCROLLINFO = 0xE9,
  SBM_GETSCROLLINFO = 0xEA,
  SBM_GETSCROLLBARINFO = 0xEB,
  BM_GETCHECK = 0xF0,
  BM_SETCHECK = 0xF1,
  BM_GETSTATE = 0xF2,
  BM_SETSTATE = 0xF3,
  BM_SETSTYLE = 0xF4,
  BM_CLICK = 0xF5,
  BM_GETIMAGE = 0xF6,
  BM_SETIMAGE = 0xF7,
  BM_SETDONTCLICK = 0xF8,
  WM_INPUT = 0xFF,
  WM_KEYFIRST = 0x100,
  WM_KEYDOWN = 0x100,
  WM_KEYUP = 0x101,
  WM_CHAR = 0x102,
  WM_DEADCHAR = 0x103,
  WM_SYSKEYDOWN = 0x104,
  WM_SYSKEYUP = 0x105,
  WM_SYSCHAR = 0x106,
  WM_SYSDEADCHAR = 0x107,
  WM_KEYLAST = 0x108,
  WM_YOMICHAR = 0x108,
  WM_UNICHAR = 0x109,
  WM_CONVERTREQUEST = 0x10A,
  WM_CONVERTRESULT = 0x10B,
  WM_IM_INFO = 0x10C,
  WM_IME_STARTCOMPOSITION = 0x10D,
  WM_IME_ENDCOMPOSITION = 0x10E,
  WM_IME_COMPOSITION = 0x10F,
  WM_IME_KEYLAST = 0x10F,
  WM_INITDIALOG = 0x110,
  WM_COMMAND = 0x111,
  WM_SYSCOMMAND = 0x112,
  WM_TIMER = 0x113,
  WM_HSCROLL = 0x114,
  WM_VSCROLL = 0x115,
  WM_INITMENU = 0x116,
  WM_INITMENUPOPUP = 0x117,
  WM_SYSTIMER = 0x118,
  WM_MENUSELECT = 0x11F,
  WM_MENUCHAR = 0x120,
  WM_ENTERIDLE = 0x121,
  WM_MENURBUTTONUP = 0x122,
  WM_MENUDRAG = 0x123,
  WM_MENUGETOBJECT = 0x124,
  WM_UNINITMENUPOPUP = 0x125,
  WM_MENUCOMMAND = 0x126,
  WM_CHANGEUISTATE = 0x127,
  WM_UPDATEUISTATE = 0x128,
  WM_QUERYUISTATE = 0x129,
  WM_LBTRACKPOINT = 0x131,
  WM_CTLCOLORMSGBOX = 0x132,
  WM_CTLCOLOREDIT = 0x133,
  WM_CTLCOLORLISTBOX = 0x134,
  WM_CTLCOLORBTN = 0x135,
  WM_CTLCOLORDLG = 0x136,
  WM_CTLCOLORSCROLLBAR = 0x137,
  WM_CTLCOLORSTATIC = 0x138,
  CB_GETEDITSEL = 0x140,
  CB_LIMITTEXT = 0x141,
  CB_SETEDITSEL = 0x142,
  CB_ADDSTRING = 0x143,
  CB_DELETESTRING = 0x144,
  CB_DIR = 0x145,
  CB_GETCOUNT = 0x146,
  CB_GETCURSEL = 0x147,
  CB_GETLBTEXT = 0x148,
  CB_GETLBTEXTLEN = 0x149,
  CB_INSERTSTRING = 0x14A,
  CB_RESETCONTENT = 0x14B,
  CB_FINDSTRING = 0x14C,
  CB_SELECTSTRING = 0x14D,
  CB_SETCURSEL = 0x14E,
  CB_SHOWDROPDOWN = 0x14F,
  CB_GETITEMDATA = 0x150,
  CB_SETITEMDATA = 0x151,
  CB_GETDROPPEDCONTROLRECT = 0x152,
  CB_SETITEMHEIGHT = 0x153,
  CB_GETITEMHEIGHT = 0x154,
  CB_SETEXTENDEDUI = 0x155,
  CB_GETEXTENDEDUI = 0x156,
  CB_GETDROPPEDSTATE = 0x157,
  CB_FINDSTRINGEXACT = 0x158,
  CB_SETLOCALE = 0x159,
  CB_GETLOCALE = 0x15A,
  CB_GETTOPINDEX = 0x15B,
  CB_SETTOPINDEX = 0x15C,
  CB_GETHORIZONTALEXTENT = 0x15D,
  CB_SETHORIZONTALEXTENT = 0x15E,
  CB_GETDROPPEDWIDTH = 0x15F,
  CB_SETDROPPEDWIDTH = 0x160,
  CB_INITSTORAGE = 0x161,
  CB_GETCOMBOBOXINFO = 0x164,
  STM_SETICON = 0x170,
  STM_GETICON = 0x171,
  STM_SETIMAGE = 0x172,
  STM_GETIMAGE = 0x173,
  LB_ADDSTRING = 0x180,
  LB_INSERTSTRING = 0x181,
  LB_DELETESTRING = 0x182,
  LB_SELITEMRANGEEX = 0x183,
  LB_RESETCONTENT = 0x184,
  LB_SETSEL = 0x185,
  LB_SETCURSEL = 0x186,
  LB_GETSEL = 0x187,
  LB_GETCURSEL = 0x188,
  LB_GETTEXT = 0x189,
  LB_GETTEXTLEN = 0x18A,
  LB_GETCOUNT = 0x18B,
  LB_SELECTSTRING = 0x18C,
  LB_DIR = 0x18D,
  LB_GETTOPINDEX = 0x18E,
  LB_FINDSTRING = 0x18F,
  LB_GETSELCOUNT = 0x190,
  LB_GETSELITEMS = 0x191,
  LB_SETTABSTOPS = 0x192,
  LB_GETHORIZONTALEXTENT = 0x193,
  LB_SETHORIZONTALEXTENT = 0x194,
  LB_SETCOLUMNWIDTH = 0x195,
  LB_ADDFILE = 0x196,
  LB_SETTOPINDEX = 0x197,
  LB_GETITEMRECT = 0x198,
  LB_GETITEMDATA = 0x199,
  LB_SETITEMDATA = 0x19A,
  LB_SELITEMRANGE = 0x19B,
  LB_SETANCHORINDEX = 0x19C,
  LB_GETANCHORINDEX = 0x19D,
  LB_SETCARETINDEX = 0x19E,
  LB_GETCARETINDEX = 0x19F,
  LB_SETITEMHEIGHT = 0x1A0,
  LB_GETITEMHEIGHT = 0x1A1,
  LB_FINDSTRINGEXACT = 0x1A2,
  LBCB_CARETON = 0x1A3,
  LBCB_CARETOFF = 0x1A4,
  LB_SETLOCALE = 0x1A5,
  LB_GETLOCALE = 0x1A6,
  LB_SETCOUNT = 0x1A7,
  LB_INITSTORAGE = 0x1A8,
  LB_ITEMFROMPOINT = 0x1A9,
  LB_INSERTSTRINGUPPER = 0x1AA,
  LB_INSERTSTRINGLOWER = 0x1AB,
  LB_ADDSTRINGUPPER = 0x1AC,
  LB_ADDSTRINGLOWER = 0x1AD,
  LB_GETLISTBOXINFO = 0x1B2,
  MN_SETHMENU = 0x1E0,
  MN_GETHMENU = 0x1E1,
  MN_SIZEWINDOW = 0x1E2,
  MN_OPENHIERARCHY = 0x1E3,
  MN_CLOSEHIERARCHY = 0x1E4,
  MN_SELECTITEM = 0x1E5,
  MN_CANCELMENUS = 0x1E6,
  MN_SELECTFIRSTVALIDITEM = 0x1E7,
  MN_GETPPOPUPMENU = 0x1EA,
  MN_FINDMENUWINDOWFROMPOINT = 0x1EB,
  MN_SHOWPOPUPWINDOW = 0x1EC,
  MN_BUTTONDOWN = 0x1ED,
  MN_MOUSEMOVE = 0x1EE,
  MN_BUTTONUP = 0x1EF,
  MN_SETTIMERTOOPENHIERARCHY = 0x1F0,
  MN_DBLCLK = 0x1F1,
  WM_MOUSEFIRST = 0x200,
  WM_MOUSEMOVE = 0x200,
  WM_LBUTTONDOWN = 0x201,
  WM_LBUTTONUP = 0x202,
  WM_LBUTTONDBLCLK = 0x203,
  WM_RBUTTONDOWN = 0x204,
  WM_RBUTTONUP = 0x205,
  WM_RBUTTONDBLCLK = 0x206,
  WM_MBUTTONDOWN = 0x207,
  WM_MBUTTONUP = 0x208,
  WM_MBUTTONDBLCLK = 0x209,
  WM_MOUSEWHEEL = 0x20A,
  WM_XBUTTONDOWN = 0x20B,
  WM_XBUTTONUP = 0x20C,
  WM_XBUTTONDBLCLK = 0x20D,
  WM_MOUSELAST = 0x20D,
  WM_PARENTNOTIFY = 0x210,
  WM_ENTERMENULOOP = 0x211,
  WM_EXITMENULOOP = 0x212,
  WM_NEXTMENU = 0x213,
  WM_SIZING = 0x214,
  WM_CAPTURECHANGED = 0x215,
  WM_MOVING = 0x216,
  WM_POWERBROADCAST = 0x218,
  WM_DEVICECHANGE = 0x219,
  WM_MDICREATE = 0x220,
  WM_MDIDESTROY = 0x221,
  WM_MDIACTIVATE = 0x222,
  WM_MDIRESTORE = 0x223,
  WM_MDINEXT = 0x224,
  WM_MDIMAXIMIZE = 0x225,
  WM_MDITILE = 0x226,
  WM_MDICASCADE = 0x227,
  WM_MDIICONARRANGE = 0x228,
  WM_MDIGETACTIVE = 0x229,
  WM_DROPOBJECT = 0x22A,
  WM_QUERYDROPOBJECT = 0x22B,
  WM_BEGINDRAG = 0x22C,
  WM_DRAGLOOP = 0x22D,
  WM_DRAGSELECT = 0x22E,
  WM_DRAGMOVE = 0x22F,
  WM_MDISETMENU = 0x230,
  WM_ENTERSIZEMOVE = 0x231,
  WM_EXITSIZEMOVE = 0x232,
  WM_DROPFILES = 0x233,
  WM_MDIREFRESHMENU = 0x234,
  WM_HANGEULFIRST = 0x280,
  WM_KANJIFIRST = 0x280,
  WM_IME_SETCONTEXT = 0x281,
  WM_IME_NOTIFY = 0x282,
  WM_IME_CONTROL = 0x283,
  WM_IME_COMPOSITIONFULL = 0x284,
  WM_IME_SELECT = 0x285,
  WM_IME_CHAR = 0x286,
  WM_IME_SYSTEM = 0x287,
  WM_IME_REQUEST = 0x288,
  WM_IME_KEYDOWN = 0x290,
  WM_IME_KEYUP = 0x291,
  WM_HANGEULLAST = 0x29F,
  WM_KANJILAST = 0x29F,
  WM_NCMOUSEHOVER = 0x2A0,
  WM_MOUSEHOVER = 0x2A1,
  WM_NCMOUSELEAVE = 0x2A2,
  WM_MOUSELEAVE = 0x2A3,
  WM_TRACKMOUSEEVENT_LAST = 0x2AF,
  WM_WTSSESSION_CHANGE = 0x2B1,
  WM_TABLET_FIRST = 0x2C0,
  WM_TABLET_LAST = 0x2DF,
  WM_CUT = 0x300,
  WM_COPY = 0x301,
  WM_PASTE = 0x302,
  WM_CLEAR = 0x303,
  WM_UNDO = 0x304,
  WM_RENDERFORMAT = 0x305,
  WM_RENDERALLFORMATS = 0x306,
  WM_DESTROYCLIPBOARD = 0x307,
  WM_DRAWCLIPBOARD = 0x308,
  WM_PAINTCLIPBOARD = 0x309,
  WM_VSCROLLCLIPBOARD = 0x30A,
  WM_SIZECLIPBOARD = 0x30B,
  WM_ASKCBFORMATNAME = 0x30C,
  WM_CHANGECBCHAIN = 0x30D,
  WM_HSCROLLCLIPBOARD = 0x30E,
  WM_QUERYNEWPALETTE = 0x30F,
  WM_PALETTEISCHANGING = 0x310,
  WM_PALETTECHANGED = 0x311,
  WM_HOTKEY = 0x312,
  WM_SYSMENU = 0x313,
  WM_HOOKMSG = 0x314,
  WM_EXITPROCESS = 0x315,
  WM_WAKETHREAD = 0x316,
  WM_PRINT = 0x317,
  WM_PRINTCLIENT = 0x318,
  WM_APPCOMMAND = 0x319,
  WM_THEMECHANGED = 0x31A,
  WM_HANDHELDFIRST = 0x358,
  WM_HANDHELDLAST = 0x35F,
  WM_AFXFIRST = 0x360,
  WM_AFXLAST = 0x37F,
  WM_PENWINFIRST = 0x380,
  WM_PENWINLAST = 0x38F,
  WM_INTERNAL_COALESCE_FIRST = 0x390,
  WM_COALESCE_FIRST = 0x390,
  WM_COALESCE_LAST = 0x39F,
  WM_MM_RESERVED_FIRST = 0x3A0,
  WM_MM_RESERVED_LAST = 0x3DF,
  WM_DDE_INITIATE = 0x3E0,
  WM_DDE_TERMINATE = 0x3E1,
  WM_DDE_ADVISE = 0x3E2,
  WM_DDE_UNADVISE = 0x3E3,
  WM_DDE_ACK = 0x3E4,
  WM_DDE_DATA = 0x3E5,
  WM_DDE_REQUEST = 0x3E6,
  WM_DDE_POKE = 0x3E7,
  WM_DDE_EXECUTE = 0x3E8,
  WM_DBNOTIFICATION = 0x3FD,
  WM_NETCONNECT = 0x3FE,
  WM_HIBERNATE = 0x3FF,
  WM_USER = 0x400,
  WM_APP = 0x8000,
};

/* 94 */
struct __declspec(align(4)) IDirectDraw
{
  IDirectDrawVtbl *lpVtbl;
};

/* 95 */
struct __declspec(align(4)) PxEveEntity
{
  _DWORD unused;
  _DWORD x;
  _DWORD y;
  _DWORD type;
  _DWORD type2;
  _DWORD count;
};

/* 96 */
struct ButtonConfig
{
  _BYTE left;
  _BYTE right;
  _BYTE up;
  _BYTE down;
  _BYTE shot;
  _BYTE pause;
  _BYTE joyShot;
  _BYTE joyPause;
};

/* 99 */
typedef LONG HRESULT;

/* 98 */
typedef GUID IID;

/* 100 */
typedef unsigned __int32 ULONG;

/* 101 */
typedef IDirectDrawClipper *LPDIRECTDRAWCLIPPER;

/* 105 */
typedef tagPALETTEENTRY *LPPALETTEENTRY;

/* 107 */
typedef IDirectDrawPalette *LPDIRECTDRAWPALETTE;

/* 109 */
typedef _DDSURFACEDESC *LPDDSURFACEDESC;

/* 124 */
typedef IDirectDrawSurface *LPDIRECTDRAWSURFACE;

/* 126 */
typedef HRESULT (__stdcall *LPDDENUMMODESCALLBACK)(LPDDSURFACEDESC, LPVOID);

/* 127 */
typedef HRESULT (__stdcall *LPDDENUMSURFACESCALLBACK)(LPDIRECTDRAWSURFACE, LPDDSURFACEDESC, LPVOID);

/* 129 */
typedef _DDCAPS DDCAPS;

/* 128 */
typedef DDCAPS *LPDDCAPS;

/* 131 */
typedef DWORD *LPDWORD;

/* 132 */
typedef BOOL *LPBOOL;

/* 97 */
struct IDirectDrawVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectDraw *This, const IID *const riid, LPVOID *ppvObj);
  ULONG (__stdcall *AddRef)(IDirectDraw *This);
  ULONG (__stdcall *Release)(IDirectDraw *This);
  HRESULT (__stdcall *Compact)(IDirectDraw *This);
  HRESULT (__stdcall *CreateClipper)(IDirectDraw *This, DWORD, LPDIRECTDRAWCLIPPER *, IUnknown *);
  HRESULT (__stdcall *CreatePalette)(IDirectDraw *This, DWORD, LPPALETTEENTRY, LPDIRECTDRAWPALETTE *, IUnknown *);
  HRESULT (__stdcall *CreateSurface)(IDirectDraw *This, LPDDSURFACEDESC, LPDIRECTDRAWSURFACE *, IUnknown *);
  HRESULT (__stdcall *DuplicateSurface)(IDirectDraw *This, LPDIRECTDRAWSURFACE, LPDIRECTDRAWSURFACE *);
  HRESULT (__stdcall *EnumDisplayModes)(IDirectDraw *This, DWORD, LPDDSURFACEDESC, LPVOID, LPDDENUMMODESCALLBACK);
  HRESULT (__stdcall *EnumSurfaces)(IDirectDraw *This, DWORD, LPDDSURFACEDESC, LPVOID, LPDDENUMSURFACESCALLBACK);
  HRESULT (__stdcall *FlipToGDISurface)(IDirectDraw *This);
  HRESULT (__stdcall *GetCaps)(IDirectDraw *This, LPDDCAPS, LPDDCAPS);
  HRESULT (__stdcall *GetDisplayMode)(IDirectDraw *This, LPDDSURFACEDESC);
  HRESULT (__stdcall *GetFourCCCodes)(IDirectDraw *This, LPDWORD, LPDWORD);
  HRESULT (__stdcall *GetGDISurface)(IDirectDraw *This, LPDIRECTDRAWSURFACE *);
  HRESULT (__stdcall *GetMonitorFrequency)(IDirectDraw *This, LPDWORD);
  HRESULT (__stdcall *GetScanLine)(IDirectDraw *This, LPDWORD);
  HRESULT (__stdcall *GetVerticalBlankStatus)(IDirectDraw *This, LPBOOL);
  HRESULT (__stdcall *Initialize)(IDirectDraw *This, GUID *);
  HRESULT (__stdcall *RestoreDisplayMode)(IDirectDraw *This);
  HRESULT (__stdcall *SetCooperativeLevel)(IDirectDraw *This, HWND, DWORD);
  HRESULT (__stdcall *SetDisplayMode)(IDirectDraw *This, DWORD, DWORD, DWORD);
  HRESULT (__stdcall *WaitForVerticalBlank)(IDirectDraw *This, DWORD, HANDLE);
};

/* 102 */
struct IDirectDrawClipper
{
  struct IDirectDrawClipper::IDirectDrawClipperVtbl *lpVtbl;
};

/* 103 */
#pragma pack(push, 8)
struct IUnknown
{
  IUnknownVtbl *lpVtbl;
};
#pragma pack(pop)

/* 104 */
#pragma pack(push, 8)
struct IUnknownVtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(IUnknown *This);
  ULONG (__stdcall *Release)(IUnknown *This);
};
#pragma pack(pop)

/* 106 */
struct tagPALETTEENTRY
{
  BYTE peRed;
  BYTE peGreen;
  BYTE peBlue;
  BYTE peFlags;
};

/* 108 */
struct IDirectDrawPalette
{
  struct IDirectDrawPalette::IDirectDrawPaletteVtbl *lpVtbl;
};

/* 111 */
union _DDSURFACEDESC::$091DBF7D405BE25E65B16620C008128B
{
  LONG lPitch;
  DWORD dwLinearSize;
};

/* 112 */
union _DDSURFACEDESC::$9AB659F8D6A45F8C7834A76B9C40973B
{
  DWORD dwMipMapCount;
  DWORD dwZBufferBitDepth;
  DWORD dwRefreshRate;
};

/* 114 */
struct _DDCOLORKEY
{
  DWORD dwColorSpaceLowValue;
  DWORD dwColorSpaceHighValue;
};

/* 113 */
typedef _DDCOLORKEY DDCOLORKEY;

/* 117 */
union _DDPIXELFORMAT::$10AA641B3215541DB69A48A361AE0013
{
  DWORD dwRGBBitCount;
  DWORD dwYUVBitCount;
  DWORD dwZBufferBitDepth;
  DWORD dwAlphaBitDepth;
};

/* 118 */
union _DDPIXELFORMAT::$0E0BD8DB15B3F2A790C062F781315157
{
  DWORD dwRBitMask;
  DWORD dwYBitMask;
};

/* 119 */
union _DDPIXELFORMAT::$DB4BDA43012B420E1DC9AEEACAA267A5
{
  DWORD dwGBitMask;
  DWORD dwUBitMask;
};

/* 120 */
union _DDPIXELFORMAT::$4C5EBD389D88C4C046794501FFF390F4
{
  DWORD dwBBitMask;
  DWORD dwVBitMask;
};

/* 121 */
union _DDPIXELFORMAT::$3ED4EC923A768B2489A9D1155BD11968
{
  DWORD dwRGBAlphaBitMask;
  DWORD dwYUVAlphaBitMask;
  DWORD dwRGBZBitMask;
  DWORD dwYUVZBitMask;
};

/* 116 */
struct _DDPIXELFORMAT
{
  DWORD dwSize;
  DWORD dwFlags;
  DWORD dwFourCC;
  union
  {
    DWORD dwRGBBitCount;
    DWORD dwYUVBitCount;
    DWORD dwZBufferBitDepth;
    DWORD dwAlphaBitDepth;
  };
  union
  {
    DWORD dwRBitMask;
    DWORD dwYBitMask;
  };
  union
  {
    DWORD dwGBitMask;
    DWORD dwUBitMask;
  };
  union
  {
    DWORD dwBBitMask;
    DWORD dwVBitMask;
  };
  union
  {
    DWORD dwRGBAlphaBitMask;
    DWORD dwYUVAlphaBitMask;
    DWORD dwRGBZBitMask;
    DWORD dwYUVZBitMask;
  };
};

/* 115 */
typedef _DDPIXELFORMAT DDPIXELFORMAT;

/* 123 */
struct _DDSCAPS
{
  DWORD dwCaps;
};

/* 122 */
typedef _DDSCAPS DDSCAPS;

/* 110 */
struct _DDSURFACEDESC
{
  DWORD dwSize;
  DWORD dwFlags;
  DWORD dwHeight;
  DWORD dwWidth;
  union
  {
    LONG lPitch;
    DWORD dwLinearSize;
  };
  DWORD dwBackBufferCount;
  union
  {
    DWORD dwMipMapCount;
    DWORD dwZBufferBitDepth;
    DWORD dwRefreshRate;
  };
  DWORD dwAlphaBitDepth;
  DWORD dwReserved;
  LPVOID lpSurface;
  DDCOLORKEY ddckCKDestOverlay;
  DDCOLORKEY ddckCKDestBlt;
  DDCOLORKEY ddckCKSrcOverlay;
  DDCOLORKEY ddckCKSrcBlt;
  DDPIXELFORMAT ddpfPixelFormat;
  DDSCAPS ddsCaps;
};

/* 125 */
struct IDirectDrawSurface
{
  struct IDirectDrawSurface::IDirectDrawSurfaceVtbl *lpVtbl;
};

/* 130 */
struct _DDCAPS
{
  DWORD dwSize;
  DWORD dwCaps;
  DWORD dwCaps2;
  DWORD dwCKeyCaps;
  DWORD dwFXCaps;
  DWORD dwFXAlphaCaps;
  DWORD dwPalCaps;
  DWORD dwSVCaps;
  DWORD dwAlphaBltConstBitDepths;
  DWORD dwAlphaBltPixelBitDepths;
  DWORD dwAlphaBltSurfaceBitDepths;
  DWORD dwAlphaOverlayConstBitDepths;
  DWORD dwAlphaOverlayPixelBitDepths;
  DWORD dwAlphaOverlaySurfaceBitDepths;
  DWORD dwZBufferBitDepths;
  DWORD dwVidMemTotal;
  DWORD dwVidMemFree;
  DWORD dwMaxVisibleOverlays;
  DWORD dwCurrVisibleOverlays;
  DWORD dwNumFourCCCodes;
  DWORD dwAlignBoundarySrc;
  DWORD dwAlignSizeSrc;
  DWORD dwAlignBoundaryDest;
  DWORD dwAlignSizeDest;
  DWORD dwAlignStrideAlign;
  DWORD dwRops[8];
  DDSCAPS ddsCaps;
  DWORD dwMinOverlayStretch;
  DWORD dwMaxOverlayStretch;
  DWORD dwMinLiveVideoStretch;
  DWORD dwMaxLiveVideoStretch;
  DWORD dwMinHwCodecStretch;
  DWORD dwMaxHwCodecStretch;
  DWORD dwReserved1;
  DWORD dwReserved2;
  DWORD dwReserved3;
  DWORD dwSVBCaps;
  DWORD dwSVBCKeyCaps;
  DWORD dwSVBFXCaps;
  DWORD dwSVBRops[8];
  DWORD dwVSBCaps;
  DWORD dwVSBCKeyCaps;
  DWORD dwVSBFXCaps;
  DWORD dwVSBRops[8];
  DWORD dwSSBCaps;
  DWORD dwSSBCKeyCaps;
  DWORD dwSSBFXCaps;
  DWORD dwSSBRops[8];
  DWORD dwMaxVideoPorts;
  DWORD dwCurrVideoPorts;
  DWORD dwSVBCaps2;
  DWORD dwNLVBCaps;
  DWORD dwNLVBCaps2;
  DWORD dwNLVBCKeyCaps;
  DWORD dwNLVBFXCaps;
  DWORD dwNLVBRops[8];
};

/* 133 */
#pragma pack(push, 4)
struct pxtnPOINT
{
  int32_t x;
  int32_t y;
};
#pragma pack(pop)

/* 135 */
enum pxWAVETYPE
{
  pxWAVETYPE_None = 0x0,
  pxWAVETYPE_Sine = 0x1,
  pxWAVETYPE_Saw = 0x2,
  pxWAVETYPE_Rect = 0x3,
  pxWAVETYPE_Random = 0x4,
  pxWAVETYPE_Saw2 = 0x5,
  pxWAVETYPE_Rect2 = 0x6,
  pxWAVETYPE_Tri = 0x7,
  pxWAVETYPE_Random2 = 0x8,
  pxWAVETYPE_Rect3 = 0x9,
  pxWAVETYPE_Rect4 = 0xA,
  pxWAVETYPE_Rect8 = 0xB,
  pxWAVETYPE_Rect16 = 0xC,
  pxWAVETYPE_Saw3 = 0xD,
  pxWAVETYPE_Saw4 = 0xE,
  pxWAVETYPE_Saw6 = 0xF,
  pxWAVETYPE_Saw8 = 0x10,
  pxWAVETYPE_num = 0x11,
};

/* 137 */
struct pxNOISEDESIGN_OSCILLATOR
{
  pxWAVETYPE type;
  float freq;
  float volume;
  float offset;
  bool b_rev;
};

/* 134 */
struct pxNOISEDESIGN_UNIT
{
  bool bEnable;
  int32_t enve_num;
  pxtnPOINT *enves;
  int32_t pan;
  pxNOISEDESIGN_OSCILLATOR main;
  pxNOISEDESIGN_OSCILLATOR freq;
  pxNOISEDESIGN_OSCILLATOR volu;
};

/* 139 */
struct WindowAttr
{
  int offsetw;
  int offseth;
  int w;
  int h;
};

